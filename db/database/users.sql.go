// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username, password, created_at, updated_at
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, username, created_at, updated_at
`

type CreateUserParams struct {
	Username  string
	Password  string
	CreatedAt time.Time
	UpdatedAt time.Time
}

type CreateUserRow struct {
	ID        uuid.UUID
	Username  string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Password,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllUsersExceptCurrent = `-- name: GetAllUsersExceptCurrent :many
SELECT id, username, created_at, updated_at FROM users WHERE id != $1
`

type GetAllUsersExceptCurrentRow struct {
	ID        uuid.UUID
	Username  string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) GetAllUsersExceptCurrent(ctx context.Context, id uuid.UUID) ([]GetAllUsersExceptCurrentRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsersExceptCurrent, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllUsersExceptCurrentRow
	for rows.Next() {
		var i GetAllUsersExceptCurrentRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserWithID = `-- name: GetUserWithID :one
SELECT id, username, created_at, updated_at FROM users WHERE id = $1
`

type GetUserWithIDRow struct {
	ID        uuid.UUID
	Username  string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) GetUserWithID(ctx context.Context, id uuid.UUID) (GetUserWithIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserWithID, id)
	var i GetUserWithIDRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserWithUsername = `-- name: GetUserWithUsername :one
SELECT id, username, password, created_at, updated_at FROM users WHERE username = $1
`

func (q *Queries) GetUserWithUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserWithUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
