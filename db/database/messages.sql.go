// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: messages.sql

package database

import (
	"context"
	"time"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages (
  sender_id, recipient_id, time, content, message_type, created_at, updated_at
) VALUES (
  ?, ?, ?, ?, ?, ?, ?
)
RETURNING id, sender_id, recipient_id, time, content, message_type, created_at, updated_at
`

type CreateMessageParams struct {
	SenderID    int64
	RecipientID int64
	Time        time.Time
	Content     string
	MessageType string
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, createMessage,
		arg.SenderID,
		arg.RecipientID,
		arg.Time,
		arg.Content,
		arg.MessageType,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.SenderID,
		&i.RecipientID,
		&i.Time,
		&i.Content,
		&i.MessageType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getChatMessages = `-- name: GetChatMessages :many
SELECT id, sender_id, recipient_id, time, content, message_type, created_at, updated_at FROM messages WHERE (recipient_id = ? AND sender_id = ?) OR (sender_id = ? AND recipient_id = ?) ORDER BY time ASC
`

type GetChatMessagesParams struct {
	RecipientID   int64
	SenderID      int64
	SenderID_2    int64
	RecipientID_2 int64
}

func (q *Queries) GetChatMessages(ctx context.Context, arg GetChatMessagesParams) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getChatMessages,
		arg.RecipientID,
		arg.SenderID,
		arg.SenderID_2,
		arg.RecipientID_2,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.SenderID,
			&i.RecipientID,
			&i.Time,
			&i.Content,
			&i.MessageType,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMessageWithFileName = `-- name: GetMessageWithFileName :one
SELECT id, sender_id, recipient_id, time, content, message_type, created_at, updated_at FROM messages WHERE content = ? AND (recipient_id = ? OR sender_id = ?)
`

type GetMessageWithFileNameParams struct {
	Content     string
	RecipientID int64
	SenderID    int64
}

func (q *Queries) GetMessageWithFileName(ctx context.Context, arg GetMessageWithFileNameParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, getMessageWithFileName, arg.Content, arg.RecipientID, arg.SenderID)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.SenderID,
		&i.RecipientID,
		&i.Time,
		&i.Content,
		&i.MessageType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
